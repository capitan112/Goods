//
//  ProductTableInteractor.swift
//  GoustoTest
//
//  Created by Oleksiy Chebotarov on 20.01.2018.
//  Copyright (c) 2018 OleksiyCheborarov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductTableBusinessLogic {
    func loadData(request: ProductTable.LoadData.Request)
    func filterCategory(request: ProductTable.FilterCategory.Request)
}

protocol ProductTableDataStore {
    var goods: [Goods] { get set }
    var filteredData: [Goods] { get set }
    var selectedProduct: Goods? { get set }
}

class ProductTableInteractor: ProductTableBusinessLogic, ProductTableDataStore {
    var goods = [Goods]()
    var filteredData = [Goods]()
    var selectedProduct: Goods?
    var worker = ProductTableWorker()
    var presenter: ProductTablePresentationLogic?
  
  // MARK: Get data
    func loadData(request: ProductTable.LoadData.Request) {
        let isConnected = Reachability.isConnectedToNetwork()
        if isConnected {
            worker.loadData(success:{ [unowned self] result in
                self.populateData()
            })
        } else {
            populateData()
        }
    }

    func populateData() {
        goods = worker.populateData()
        filteredData = goods
        let responce = ProductTable.LoadData.Response()
        presenter?.loadingComplete(response: responce)
    }
    
    func filterCategory(request: ProductTable.FilterCategory.Request) {
        if let searchText = request.filterText {
            filteredData = (searchText.isEmpty ? goods : goods.filter { (item: Goods?) -> Bool in
                if let categories = item?.categories {
                    var isExist = false
                    for categoryTitle in categories {
                        isExist = categoryTitle.range(of: searchText, options: .caseInsensitive, range: nil, locale: nil) != nil
                        if isExist {
                            return true
                        }
                    }
                }
                return false
            })
            let responce = ProductTable.FilterCategory.Response()
            presenter?.filterCategory(response: responce)
        }
    }
}
