//
//  ProductTableViewControllerTests.swift
//  GoustoTest
//
//  Created by Oleksiy Chebotarov on 22.01.2018.
//  Copyright (c) 2018 OleksiyCheborarov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GoustoTest
import XCTest

class ProductTableViewControllerTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: ProductTableVC!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupProductTableViewController()
  }
  
  override func tearDown() {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupProductTableViewController() {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "ProductTableVC") as! ProductTableVC
  }
  
  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
    
class ProductTableBusinessLogicSpy: ProductTableBusinessLogic, ProductTableDataStore {
    var goods = [Goods]()
    var filteredData = [Goods]()
    var selectedProduct: Goods?
    
    var loadData = false
    var filterCategory = false
    
    func loadData(request: ProductTable.LoadData.Request) {
        loadData = true
    }
    
    func filterCategory(request: ProductTable.FilterCategory.Request) {
        filterCategory = true
    }
}
  
  // MARK: Tests
  
  func testShouldDoLoadDataWhenViewIsLoaded() {
    // Given
    let spy = ProductTableBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.loadData, "viewDidLoad() should ask the interactor to loadData")
  }
  
  func testDisplaySomething() {
    // Given
    
    let spy = ProductTableBusinessLogicSpy()
    sut.interactor = spy

    // When
    loadView()
    let request = ProductTable.FilterCategory.Request(filterText: "searchText")
    sut.interactor?.filterCategory(request: request)

    // Then
    XCTAssertTrue(spy.filterCategory, "filterCategory(viewModel:) should update the filterCategory value")
  }
    
}
